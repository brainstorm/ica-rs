/*
 * Genomic Data Store Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

/// AwsS3TemporaryUploadCredentials : AwsS3TemporaryUploadCredentials

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AwsS3TemporaryUploadCredentials {
    /// Access key for use with AWS S3
    #[serde(rename = "access_Key_Id", skip_serializing_if = "Option::is_none")]
    pub access_key_id: Option<String>,
    /// Secret key for use with AWS S3
    #[serde(rename = "secret_Access_Key", skip_serializing_if = "Option::is_none")]
    pub secret_access_key: Option<String>,
    /// Token for use with AWS S3
    #[serde(rename = "session_Token", skip_serializing_if = "Option::is_none")]
    pub session_token: Option<String>,
    /// AWS region the folder will/does reside in
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// AWS bucket the folder will/does reside in
    #[serde(rename = "bucketName", skip_serializing_if = "Option::is_none")]
    pub bucket_name: Option<String>,
    /// AWS upload location for this folder
    #[serde(rename = "keyPrefix", skip_serializing_if = "Option::is_none")]
    pub key_prefix: Option<String>,
    /// expiration for temporary credentials
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    /// Service endpoint for accessing S3.  This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud.
    #[serde(rename = "serviceUrl", skip_serializing_if = "Option::is_none")]
    pub service_url: Option<String>,
    /// Used to specify the type of server-side encryption (SSE) to be used on the object provider.  This value is used to determine the Amazon S3 header \"x-amz-server-side-encryption\" value.  For example, specify \"AES256\" for SSE-S3, or \"AWS:KMS\" for SSE-KMS.  By default if none is specified, \"AES256\" will be used.
    #[serde(
        rename = "serverSideEncryptionAlgorithm",
        skip_serializing_if = "Option::is_none"
    )]
    pub server_side_encryption_algorithm: Option<String>,
    /// Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm  This value can be the AWS KMS arn key, to be used for the Amazon S3 header \"x-amz-server-side-encryption-aws-kms-key-id\" value  Value will be ignored if encryption is \"AES256\"
    #[serde(
        rename = "serverSideEncryptionKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub server_side_encryption_key: Option<String>,
}

impl AwsS3TemporaryUploadCredentials {
    /// AwsS3TemporaryUploadCredentials
    pub fn new() -> AwsS3TemporaryUploadCredentials {
        AwsS3TemporaryUploadCredentials {
            access_key_id: None,
            secret_access_key: None,
            session_token: None,
            region: None,
            bucket_name: None,
            key_prefix: None,
            expiration_date: None,
            service_url: None,
            server_side_encryption_algorithm: None,
            server_side_encryption_key: None,
        }
    }
}
