/*
 * Genomic Data Store Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FolderResponse {
    /// A unique identifier for this Folder
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of this Folder
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The unique identifier for this Folder's Volume
    #[serde(rename = "volumeId", skip_serializing_if = "Option::is_none")]
    pub volume_id: Option<String>,
    /// The unique identifier for this folder's parent folder
    #[serde(rename = "parentFolderId", skip_serializing_if = "Option::is_none")]
    pub parent_folder_id: Option<String>,
    /// The name of this Folder's Volume
    #[serde(rename = "volumeName", skip_serializing_if = "Option::is_none")]
    pub volume_name: Option<String>,
    /// The unique identifier for this Folders's Tenant
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    /// The unique identifier for this Folder's Sub Tenant
    #[serde(rename = "subTenantId", skip_serializing_if = "Option::is_none")]
    pub sub_tenant_id: Option<String>,
    /// The Universal Resource Name, unique to this Folder
    #[serde(rename = "urn", skip_serializing_if = "Option::is_none")]
    pub urn: Option<String>,
    /// The (GDS) folder path to this Folder
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The list of directly specified Id(s) that have access to this Folder
    #[serde(rename = "acl", skip_serializing_if = "Option::is_none")]
    pub acl: Option<Vec<String>>,
    /// The inherited list of Id(s) that have access to this Folder
    #[serde(rename = "inheritedAcl", skip_serializing_if = "Option::is_none")]
    pub inherited_acl: Option<Vec<String>>,
    /// The date & time this Folder was created, in GDS
    #[serde(rename = "timeCreated", skip_serializing_if = "Option::is_none")]
    pub time_created: Option<String>,
    /// The creator of this Folder
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// The date & time this Folder was updated, in GDS
    #[serde(rename = "timeModified", skip_serializing_if = "Option::is_none")]
    pub time_modified: Option<String>,
    /// The updator of this Folder
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// Metadata about this folder
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    /// Metadata about this folder's volume
    #[serde(rename = "volumeMetadata", skip_serializing_if = "Option::is_none")]
    pub volume_metadata: Option<serde_json::Value>,
    #[serde(rename = "jobStatus", skip_serializing_if = "Option::is_none")]
    pub job_status: Option<crate::models::JobStatus>,
    /// The job identifier for the current folder operation. Currently only being used for the delete folder operation.
    #[serde(rename = "jobId", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "archiveJobStorageTier", skip_serializing_if = "Option::is_none")]
    pub archive_job_storage_tier: Option<crate::models::StorageTier>,
}

impl FolderResponse {
    pub fn new() -> FolderResponse {
        FolderResponse {
            id: None,
            name: None,
            volume_id: None,
            parent_folder_id: None,
            volume_name: None,
            tenant_id: None,
            sub_tenant_id: None,
            urn: None,
            path: None,
            acl: None,
            inherited_acl: None,
            time_created: None,
            created_by: None,
            time_modified: None,
            modified_by: None,
            metadata: None,
            volume_metadata: None,
            job_status: None,
            job_id: None,
            archive_job_storage_tier: None,
        }
    }
}


