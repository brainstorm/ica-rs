/*
 * Genomic Data Store Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FileResponse {
    /// Metadata about this file's volume
    #[serde(rename = "volumeMetadata", skip_serializing_if = "Option::is_none")]
    pub volume_metadata: Option<serde_json::Value>,
    /// A unique identifier for this File
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of this File
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The unique identifier of the volume where the file resides
    #[serde(rename = "volumeId", skip_serializing_if = "Option::is_none")]
    pub volume_id: Option<String>,
    /// The unique identifier of the folder where the file resides
    #[serde(rename = "parentFolderId", skip_serializing_if = "Option::is_none")]
    pub parent_folder_id: Option<String>,
    /// The name of the volume where the file resides
    #[serde(rename = "volumeName", skip_serializing_if = "Option::is_none")]
    pub volume_name: Option<String>,
    /// The name of the volume configuration (BYOB only)
    #[serde(rename = "volumeConfigurationName", skip_serializing_if = "Option::is_none")]
    pub volume_configuration_name: Option<String>,
    /// The type of the File
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// The unique identifier for this File's Tenant
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    /// The unique identifier for this File's Sub Tenant
    #[serde(rename = "subTenantId", skip_serializing_if = "Option::is_none")]
    pub sub_tenant_id: Option<String>,
    /// The (GDS) path to this File
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The date & time this File was created, in GDS
    #[serde(rename = "timeCreated", skip_serializing_if = "Option::is_none")]
    pub time_created: Option<String>,
    /// The creator of this File
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// The date & time this File was updated, in GDS
    #[serde(rename = "timeModified", skip_serializing_if = "Option::is_none")]
    pub time_modified: Option<String>,
    /// The updator of this File
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// The inherited list of Id(s) that have access to this File
    #[serde(rename = "inheritedAcl", skip_serializing_if = "Option::is_none")]
    pub inherited_acl: Option<Vec<String>>,
    /// The Universal Resource Name, unique to this File
    #[serde(rename = "urn", skip_serializing_if = "Option::is_none")]
    pub urn: Option<String>,
    /// The File's Size in bytes
    #[serde(rename = "sizeInBytes", skip_serializing_if = "Option::is_none")]
    pub size_in_bytes: Option<i64>,
    /// Metadata about this File
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    /// The current upload state of the File
    #[serde(rename = "isUploaded", skip_serializing_if = "Option::is_none")]
    pub is_uploaded: Option<bool>,
    #[serde(rename = "archiveStatus", skip_serializing_if = "Option::is_none")]
    pub archive_status: Option<crate::models::ArchiveStatuses>,
    /// The date & time this File was archived
    #[serde(rename = "timeArchived", skip_serializing_if = "Option::is_none")]
    pub time_archived: Option<String>,
    #[serde(rename = "storageTier", skip_serializing_if = "Option::is_none")]
    pub storage_tier: Option<crate::models::StorageTier>,
    /// The File's ETag
    #[serde(rename = "eTag", skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<String>,
    /// The File's Format
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(rename = "formatEdam", skip_serializing_if = "Option::is_none")]
    pub format_edam: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::FileStatus>,
    #[serde(rename = "lifeCycle", skip_serializing_if = "Option::is_none")]
    pub life_cycle: Option<Box<crate::models::FileLifeCycleSettings>>,
    /// The presigned Url allowing access to this File
    #[serde(rename = "presignedUrl", skip_serializing_if = "Option::is_none")]
    pub presigned_url: Option<String>,
}

impl FileResponse {
    pub fn new() -> FileResponse {
        FileResponse {
            volume_metadata: None,
            id: None,
            name: None,
            volume_id: None,
            parent_folder_id: None,
            volume_name: None,
            volume_configuration_name: None,
            _type: None,
            tenant_id: None,
            sub_tenant_id: None,
            path: None,
            time_created: None,
            created_by: None,
            time_modified: None,
            modified_by: None,
            inherited_acl: None,
            urn: None,
            size_in_bytes: None,
            metadata: None,
            is_uploaded: None,
            archive_status: None,
            time_archived: None,
            storage_tier: None,
            e_tag: None,
            format: None,
            format_edam: None,
            status: None,
            life_cycle: None,
            presigned_url: None,
        }
    }
}


