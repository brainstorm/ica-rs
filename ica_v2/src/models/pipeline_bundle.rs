/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p>
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PipelineBundle {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "maxNumberOfAllowedSlots")]
    pub max_number_of_allowed_slots: i32,
    #[serde(rename = "activePipelines")]
    pub active_pipelines: Vec<crate::models::Pipeline>,
    #[serde(rename = "canceledPipelines")]
    pub canceled_pipelines: Vec<crate::models::Pipeline>,
    #[serde(rename = "retiredPipelines")]
    pub retired_pipelines: Vec<crate::models::Pipeline>,
    #[serde(rename = "regions")]
    pub regions: Vec<crate::models::Region>,
    #[serde(rename = "analysisStorages")]
    pub analysis_storages: Vec<crate::models::AnalysisStorage>,
}

impl PipelineBundle {
    pub fn new(
        id: uuid::Uuid,
        name: String,
        max_number_of_allowed_slots: i32,
        active_pipelines: Vec<crate::models::Pipeline>,
        canceled_pipelines: Vec<crate::models::Pipeline>,
        retired_pipelines: Vec<crate::models::Pipeline>,
        regions: Vec<crate::models::Region>,
        analysis_storages: Vec<crate::models::AnalysisStorage>,
    ) -> PipelineBundle {
        PipelineBundle {
            id,
            name,
            max_number_of_allowed_slots,
            active_pipelines,
            canceled_pipelines,
            retired_pipelines,
            regions,
            analysis_storages,
        }
    }
}
