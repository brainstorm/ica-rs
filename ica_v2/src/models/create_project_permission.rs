/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> 
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateProjectPermission {
    #[serde(rename = "roleProject")]
    pub role_project: RoleProject,
    #[serde(rename = "roleFlow")]
    pub role_flow: RoleFlow,
    #[serde(rename = "roleBase")]
    pub role_base: RoleBase,
    #[serde(rename = "roleBench")]
    pub role_bench: RoleBench,
    /// How users are invited to the project
    #[serde(rename = "membershipType")]
    pub membership_type: MembershipType,
    /// the id of the user that should be given access, required when membershipType is USER
    #[serde(rename = "userId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<Option<uuid::Uuid>>,
    /// The email to invite a user on, required when membershipType is EMAIL
    #[serde(rename = "emailAddress", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email_address: Option<Option<String>>,
    /// the id of the workgroup to give access, required when membershipType is WORKGROUP
    #[serde(rename = "workgroupId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub workgroup_id: Option<Option<uuid::Uuid>>,
    /// Indicates if uploading data is allowed or not.
    #[serde(rename = "uploadAllowed")]
    pub upload_allowed: bool,
    /// Indicates if downloading data is allowed or not.
    #[serde(rename = "downloadAllowed")]
    pub download_allowed: bool,
}

impl CreateProjectPermission {
    pub fn new(role_project: RoleProject, role_flow: RoleFlow, role_base: RoleBase, role_bench: RoleBench, membership_type: MembershipType, upload_allowed: bool, download_allowed: bool) -> CreateProjectPermission {
        CreateProjectPermission {
            role_project,
            role_flow,
            role_base,
            role_bench,
            membership_type,
            user_id: None,
            email_address: None,
            workgroup_id: None,
            upload_allowed,
            download_allowed,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoleProject {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "VIEWER")]
    Viewer,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
    #[serde(rename = "ADMINISTRATOR")]
    Administrator,
    #[serde(rename = "DATA_PROVIDER")]
    DataProvider,
}

impl Default for RoleProject {
    fn default() -> RoleProject {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoleFlow {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "VIEWER")]
    Viewer,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
}

impl Default for RoleFlow {
    fn default() -> RoleFlow {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoleBase {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "VIEWER")]
    Viewer,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
}

impl Default for RoleBase {
    fn default() -> RoleBase {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoleBench {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,
}

impl Default for RoleBench {
    fn default() -> RoleBench {
        Self::None
    }
}
/// How users are invited to the project
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MembershipType {
    #[serde(rename = "USER")]
    User,
    #[serde(rename = "EMAIL")]
    Email,
    #[serde(rename = "WORKGROUP")]
    Workgroup,
}

impl Default for MembershipType {
    fn default() -> MembershipType {
        Self::User
    }
}

