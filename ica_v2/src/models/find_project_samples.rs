/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> 
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FindProjectSamples {
    /// Adds a condition on a string field.
    #[serde(rename = "conditions")]
    pub conditions: Vec<crate::models::FindSampleCondition>,
    /// Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field.
    #[serde(rename = "dateConditions")]
    pub date_conditions: Vec<crate::models::FindSampleDateCondition>,
    /// Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field.
    #[serde(rename = "numberConditions")]
    pub number_conditions: Vec<crate::models::FindSampleNumberCondition>,
    /// Adds a condition on a boolean field.
    #[serde(rename = "booleanConditions")]
    pub boolean_conditions: Vec<crate::models::FindSampleBooleanCondition>,
    /// Adds a fuzzy matching condition for the text on all string fields of the sample i.e. on both the fixed fields (name, description) as any metadata text field.
    #[serde(rename = "fullTextSearchString", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_text_search_string: Option<Option<String>>,
    /// Indicates whether deleted samples should be included.
    #[serde(rename = "includeDeleted", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_deleted: Option<Option<bool>>,
    /// The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.
    #[serde(rename = "userTags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_tags: Option<Option<Vec<String>>>,
    /// How the usertags are filtered.
    #[serde(rename = "userTagMatchMode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_tag_match_mode: Option<Option<UserTagMatchMode>>,
    /// The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.
    #[serde(rename = "runInputTags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub run_input_tags: Option<Option<Vec<String>>>,
    /// How the runInputTags are filtered.
    #[serde(rename = "runInputTagMatchMode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub run_input_tag_match_mode: Option<Option<RunInputTagMatchMode>>,
    /// The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.
    #[serde(rename = "connectorTags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connector_tags: Option<Option<Vec<String>>>,
    /// How the connectorTags are filtered.
    #[serde(rename = "connectorTagMatchMode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connector_tag_match_mode: Option<Option<ConnectorTagMatchMode>>,
    /// The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.
    #[serde(rename = "techTags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tech_tags: Option<Option<Vec<String>>>,
    /// How the technicalTags are filtered.
    #[serde(rename = "techTagMatchMode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tech_tag_match_mode: Option<Option<TechTagMatchMode>>,
    #[serde(rename = "instrumentRunIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instrument_run_ids: Option<Option<Vec<String>>>,
}

impl FindProjectSamples {
    pub fn new(conditions: Vec<crate::models::FindSampleCondition>, date_conditions: Vec<crate::models::FindSampleDateCondition>, number_conditions: Vec<crate::models::FindSampleNumberCondition>, boolean_conditions: Vec<crate::models::FindSampleBooleanCondition>) -> FindProjectSamples {
        FindProjectSamples {
            conditions,
            date_conditions,
            number_conditions,
            boolean_conditions,
            full_text_search_string: None,
            include_deleted: None,
            user_tags: None,
            user_tag_match_mode: None,
            run_input_tags: None,
            run_input_tag_match_mode: None,
            connector_tags: None,
            connector_tag_match_mode: None,
            tech_tags: None,
            tech_tag_match_mode: None,
            instrument_run_ids: None,
        }
    }
}

/// How the usertags are filtered.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserTagMatchMode {
    #[serde(rename = "EXACT")]
    Exact,
    #[serde(rename = "EXCLUDE")]
    Exclude,
    #[serde(rename = "FUZZY")]
    Fuzzy,
}

impl Default for UserTagMatchMode {
    fn default() -> UserTagMatchMode {
        Self::Exact
    }
}
/// How the runInputTags are filtered.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunInputTagMatchMode {
    #[serde(rename = "EXACT")]
    Exact,
    #[serde(rename = "EXCLUDE")]
    Exclude,
    #[serde(rename = "FUZZY")]
    Fuzzy,
}

impl Default for RunInputTagMatchMode {
    fn default() -> RunInputTagMatchMode {
        Self::Exact
    }
}
/// How the connectorTags are filtered.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectorTagMatchMode {
    #[serde(rename = "EXACT")]
    Exact,
    #[serde(rename = "EXCLUDE")]
    Exclude,
    #[serde(rename = "FUZZY")]
    Fuzzy,
}

impl Default for ConnectorTagMatchMode {
    fn default() -> ConnectorTagMatchMode {
        Self::Exact
    }
}
/// How the technicalTags are filtered.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TechTagMatchMode {
    #[serde(rename = "EXACT")]
    Exact,
    #[serde(rename = "EXCLUDE")]
    Exclude,
    #[serde(rename = "FUZZY")]
    Fuzzy,
}

impl Default for TechTagMatchMode {
    fn default() -> TechTagMatchMode {
        Self::Exact
    }
}

