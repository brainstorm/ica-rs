/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> 
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Pipeline {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "timeCreated")]
    pub time_created: String,
    #[serde(rename = "timeModified")]
    pub time_modified: String,
    #[serde(rename = "ownerId")]
    pub owner_id: uuid::Uuid,
    #[serde(rename = "tenantId")]
    pub tenant_id: uuid::Uuid,
    #[serde(rename = "tenantName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant_name: Option<Option<String>>,
    /// The code of the pipeline
    #[serde(rename = "code")]
    pub code: String,
    /// The URN of the pipeline. The format is urn:ilmn:ica:\\<type of the object\\>:\\<ID of the object\\>#\\<optional human readable hint representing the object\\>. The hint can be omitted, in that case the hashtag (#) must also be omitted.
    #[serde(rename = "urn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub urn: Option<Option<String>>,
    /// The description of the pipeline
    #[serde(rename = "description")]
    pub description: String,
    /// The language that is used by the pipeline
    #[serde(rename = "language")]
    pub language: Language,
    #[serde(rename = "languageVersion", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub language_version: Option<Option<Box<crate::models::PipelineLanguageVersion>>>,
    #[serde(rename = "pipelineTags")]
    pub pipeline_tags: Box<crate::models::PipelineTag>,
    #[serde(rename = "analysisStorage")]
    pub analysis_storage: Box<crate::models::AnalysisStorage>,
}

impl Pipeline {
    pub fn new(id: uuid::Uuid, time_created: String, time_modified: String, owner_id: uuid::Uuid, tenant_id: uuid::Uuid, code: String, description: String, language: Language, pipeline_tags: crate::models::PipelineTag, analysis_storage: crate::models::AnalysisStorage) -> Pipeline {
        Pipeline {
            id,
            time_created,
            time_modified,
            owner_id,
            tenant_id,
            tenant_name: None,
            code,
            urn: None,
            description,
            language,
            language_version: None,
            pipeline_tags: Box::new(pipeline_tags),
            analysis_storage: Box::new(analysis_storage),
        }
    }
}

/// The language that is used by the pipeline
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "CWL")]
    Cwl,
    #[serde(rename = "NEXTFLOW")]
    Nextflow,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for Language {
    fn default() -> Language {
        Self::Cwl
    }
}

