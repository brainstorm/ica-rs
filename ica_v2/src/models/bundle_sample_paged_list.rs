/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> 
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BundleSamplePagedList {
    #[serde(rename = "items")]
    pub items: Vec<crate::models::BundleSample>,
    /// The cursor to request the next page. For offset-based paging the value is an empty string.
    #[serde(rename = "nextPageToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<Option<String>>,
    /// The number of records remaining (used in cursor based pagination)
    #[serde(rename = "remainingRecords", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub remaining_records: Option<Option<i64>>,
    /// The total number of records matching the search criteria (used in offset based pagination)
    #[serde(rename = "totalItemCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub total_item_count: Option<Option<i64>>,
}

impl BundleSamplePagedList {
    pub fn new(items: Vec<crate::models::BundleSample>) -> BundleSamplePagedList {
        BundleSamplePagedList {
            items,
            next_page_token: None,
            remaining_records: None,
            total_item_count: None,
        }
    }
}


