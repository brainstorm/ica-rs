/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p>
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateCwlAnalysis {
    /// The user-reference of the analysis. This should be something meaningful for the user.
    #[serde(rename = "userReference")]
    pub user_reference: String,
    /// The pipeline for which an analysis will be created.
    #[serde(rename = "pipelineId")]
    pub pipeline_id: String,
    #[serde(rename = "tags")]
    pub tags: Box<crate::models::AnalysisTag>,
    /// Indicates under which activation code the pipeline is executed.
    #[serde(rename = "activationCodeDetailId")]
    pub activation_code_detail_id: uuid::Uuid,
    /// The id of the storage to use for the analysis.
    #[serde(
        rename = "analysisStorageId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub analysis_storage_id: Option<Option<uuid::Uuid>>,
    /// The id of the folder in which the output folder should be created.
    #[serde(
        rename = "outputParentFolderId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub output_parent_folder_id: Option<Option<String>>,
    #[serde(
        rename = "analysisOutput",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub analysis_output: Option<Option<Vec<crate::models::AnalysisOutputMapping>>>,
    #[serde(rename = "analysisInput")]
    pub analysis_input: Box<crate::models::CwlAnalysisInput>,
}

impl CreateCwlAnalysis {
    pub fn new(
        user_reference: String,
        pipeline_id: String,
        tags: crate::models::AnalysisTag,
        activation_code_detail_id: uuid::Uuid,
        analysis_input: crate::models::CwlAnalysisInput,
    ) -> CreateCwlAnalysis {
        CreateCwlAnalysis {
            user_reference,
            pipeline_id,
            tags: Box::new(tags),
            activation_code_detail_id,
            analysis_storage_id: None,
            output_parent_folder_id: None,
            analysis_output: None,
            analysis_input: Box::new(analysis_input),
        }
    }
}
