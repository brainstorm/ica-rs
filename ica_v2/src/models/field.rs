/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p>
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Field {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "fieldType", skip_serializing_if = "Option::is_none")]
    pub field_type: Option<FieldType>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "multivalued", skip_serializing_if = "Option::is_none")]
    pub multivalued: Option<bool>,
    #[serde(rename = "filledByPipeline", skip_serializing_if = "Option::is_none")]
    pub filled_by_pipeline: Option<bool>,
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<crate::models::Field>>,
    #[serde(rename = "enumerationValues", skip_serializing_if = "Option::is_none")]
    pub enumeration_values: Option<Vec<String>>,
}

impl Field {
    pub fn new(id: String) -> Field {
        Field {
            id,
            name: None,
            description: None,
            field_type: None,
            required: None,
            multivalued: None,
            filled_by_pipeline: None,
            fields: None,
            enumeration_values: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FieldType {
    #[serde(rename = "TEXT")]
    Text,
    #[serde(rename = "NUMERIC")]
    Numeric,
    #[serde(rename = "BOOLEAN")]
    Boolean,
    #[serde(rename = "DATE")]
    Date,
    #[serde(rename = "ENUMERATION")]
    Enumeration,
    #[serde(rename = "FIELDGROUP")]
    Fieldgroup,
    #[serde(rename = "PIPELINE_REFERENCE")]
    PipelineReference,
}

impl Default for FieldType {
    fn default() -> FieldType {
        Self::Text
    }
}
