/*
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p>
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Job {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "status")]
    pub status: Status,
    /// Additional information regarding the status of this job.
    #[serde(
        rename = "additionalStatusInformation",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_status_information: Option<Option<String>>,
    /// The type of the subject for which this job provides execution.
    #[serde(rename = "subjectType")]
    pub subject_type: String,
    /// The id of the subject for which this job provides execution.
    #[serde(rename = "subjectId")]
    pub subject_id: uuid::Uuid,
    #[serde(rename = "timeCreated")]
    pub time_created: String,
    #[serde(
        rename = "timeStarted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub time_started: Option<Option<String>>,
    #[serde(
        rename = "timeFinished",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub time_finished: Option<Option<String>>,
    #[serde(rename = "owner")]
    pub owner: Box<crate::models::User>,
    #[serde(
        rename = "project",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub project: Option<Option<Box<crate::models::Project>>>,
}

impl Job {
    pub fn new(
        id: uuid::Uuid,
        status: Status,
        subject_type: String,
        subject_id: uuid::Uuid,
        time_created: String,
        owner: crate::models::User,
    ) -> Job {
        Job {
            id,
            status,
            additional_status_information: None,
            subject_type,
            subject_id,
            time_created,
            time_started: None,
            time_finished: None,
            owner: Box::new(owner),
            project: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "INITIALIZED")]
    Initialized,
    #[serde(rename = "WAITING_FOR_RESOURCES")]
    WaitingForResources,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "STOPPED")]
    Stopped,
    #[serde(rename = "SUCCEEDED")]
    Succeeded,
    #[serde(rename = "PARTIALLY_SUCCEEDED")]
    PartiallySucceeded,
    #[serde(rename = "FAILED")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Initialized
    }
}
